# -*- coding: utf-8 -*-
"""streamlit_bsm_option_pricing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1erw8dQcFfGy7Eyww8d4qWuFtsFfxQAbY
"""


# ðŸ“Œ Import libraries
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# ðŸ“Œ Black-Scholes-Merton Formula
def bsm_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2)* T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)

    if option_type == 'call':
        price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    elif option_type == 'put':
        price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    else:
        raise ValueError("option_type must be 'call' or 'put'")

    return price

# ðŸ“Œ Greeks calculation
def bsm_greeks(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2)* T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)

    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)
    gamma = norm.pdf(d1) / (S * sigma * np.sqrt(T))
    theta = (-S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) -
             r * K * np.exp(-r * T) * norm.cdf(d2 if option_type == 'call' else -d2))
    vega = S * norm.pdf(d1) * np.sqrt(T)
    rho = K * T * np.exp(-r * T) * (norm.cdf(d2) if option_type == 'call' else -norm.cdf(-d2))

    return {
        'Delta': delta,
        'Gamma': gamma,
        'Theta': theta,
        'Vega': vega / 100,
        'Rho': rho / 100
    }

# ðŸ“Œ User Inputs
S = 100     # Spot Price
K = 100     # Strike Price
T = 1       # Time to Expiry (in years)
r = 0.05    # Risk-free rate (5%)
sigma = 0.2 # Volatility (20%)
option_type = 'call'  # 'call' or 'put'

# ðŸ“Œ Calculate Option Price & Greeks
price = bsm_price(S, K, T, r, sigma, option_type)
greeks = bsm_greeks(S, K, T, r, sigma, option_type)

# ðŸ“Œ Display Results
print(f"\nðŸ“ˆ Black-Scholes {option_type.title()} Option Price: â‚¹{price:.2f}")
print("\nðŸ“Š Greeks:")
for g, v in greeks.items():
    print(f"  {g}: {v:.4f}")

# ðŸ“Œ Plotting Payoff Diagram
spot_range = np.linspace(50, 150, 100)
if option_type == 'call':
    payoff = np.maximum(spot_range - K, 0) - price
else:
    payoff = np.maximum(K - spot_range, 0) - price

plt.figure(figsize=(8, 5))
plt.plot(spot_range, payoff, label=f"{option_type.title()} Option Payoff")
plt.axhline(0, color='black', linestyle='--')
plt.axvline(S, color='grey', linestyle=':', label='Current Price')
plt.title(f'{option_type.title()} Option Payoff Diagram')
plt.xlabel('Stock Price at Expiry')
plt.ylabel('Profit / Loss')
plt.grid(True)
plt.legend()
plt.show()
